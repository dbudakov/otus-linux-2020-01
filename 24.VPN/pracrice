pracrice

server
  eth1 10.0.0.10/24
  eth2 172.16.1.1/24
  tun0 172.16.0.1 peer 172.16.0.2/32 scope global tun0

ping 172.16.0.2
systemctl status openvpn@server.service
ps ax|grep openvpn

client
  eth1 10.0.0.20/24
  eth2 172.16.2.1/24
  tun0 172.16.0.2 peer 172.16.0.1/32 scope global tun0

tcpdump -nvvv -itun0 icmp - тунельный интефейс ловит icmp пакеты
tcpdump -nvvv -ieth1 icmp - если посмотрить интерфейс до! туннеля там не будет этих пакетов, потому что они не icmp, необходимо запустить без параметра `icmp`, получается что пакеты на белых интерфейса есть на это не icmp, а весь трафик icmp  запорачивает в туннель на tun0 и там действительно icmp трафик

Генерация ключей:
  СОВЕТ: генерация идет через обычный скрипт и можно дополнить его нужными переменными
  Клонируем git репозиторий:
    git clone https://github.com/OpenVPN/easy-rsa

  Сгенерируем ключ для подъема сервера и подключения к нему клиентов
    Зачищаем репозиторий, на случай, если там что-то осталось
      ./easyrsa3/easyrsa clean-all

    Первичная инициализация инфраструктуры x509-pki, подтверждаем зачистку:
      ./easyrsa3/easyrsa init-pki

    Сгенерируем корневой сертификат сервера, можно оставить все дефолтное, подтверждая запросы, упадет в ./ или ./issued/., ключ упадет в ./private
      ./easyrsa3/easyrsa build-ca nopass

    Сгенерируем ключ сервера, для IP, если подключение планируется по имени сервера то вместо IP(1.1.1.1) необходимо указать его имя. Сертификат появтся в каталоге /issued, ключ появится в каталоге ./private/.
      ./easyrsa3/easyrsa build-server-full 1.1.1.1 nopass

    Этого набора достаточно для запуска сервера, далее генерируем ключи клиентов, login: client1, упадет в ./pki/issued/.
    Дополнительно при генерации сертификата формирутся ключ, который падает в ./private
      ./easyrsa3/easyrsa build-client-full client1 nopass

    Посмотреть сертификат можно командой:
      ./easyrsa3/easyrsa show-cert 1.1.1.1
      ./easyrsa3/easyrsa show-cert client1

  Для того чтобы заработал сервер необходимо скопировать в каталог
    /etc/openvpn, можно изменить место хранения ключей отредактировав server.conf
      1. корневой сертификат /home/vagrant/easy-rsa/easyrsa3/pki/ca.crt
      2. сертификат сервера  /home/vagrant/easy-rsa/easyrsa3/pki/issued/1.1.1.1.crt
      3. приватный ключ сервера /home/vagrant/easy-rsa/easyrsa3/pki/private/1.1.1.1.key

  Ключ dh, длинной 2048 бит, генерируется следующим образом:
    openssl dhparam -outform PEM -out dh2048.pem 2048

  Отзываем сертификат из центра сертификации сервера
    Отозвать ключ клиента и подтверждаем выполнение
      ./easyrsa3/easyrsa revoke client1

    В выводе будут указания запуска команд, после запуска следующей команды будет сгенерирован файлик, который нужно скопировать в каталог конфига openvpn, файл будет указан в выводе
      ./easyrsa3/easyrsa gen-crl
      cp ./easyrsa3/easyrsa/crl.pem /etc/openvpn/keys/crl.pem
    
    crl - certificate revocation list

    Дописываем строку в конфиг openvpn
      echo "crl-verify /etc/openvpn/keys/crl.pem" >> /etc/openvpn/server.conf

    Теперь будет отрабатывать верификация активных сертификатов, перечитывает каждый час рестартовать сервис не нужно


  Создание файла настроек для клиента на сервере,создаем файл /etc/openvpn/client1.ovpn, настраиваем его и в дальнейшем можно передать его клиенту, для подключения

  Ключ dh не передается и всегда находится на сервере

Маршрутизация WG
  Когда wg включен весь трафик уходит в тунель, и доступа в интернет не будет, если посмотреть на сервер на который wg переправляет пакеты, то сервер будет получать пакеты, но не будет знать куда их отпралять, для этого нужно дописать правило iptables, например в таблицу nat с использованием масказада и разрешить forwarding
    iptables -t nat -A POSTROUTING -s 10.64.20.0/30 -o eth0 -j MASQUERADE
    sysctl -w net.ipv4.ip_forward=1

  ip rule show - вывод правил позволяющих маркировать пакеты и обрабатывать их в соответствии с правилом.
  /etc/iproute2/rt_tables
  в выводе: systemctl status wireguard@wg0, имеется спойлек таблиц обработки пакетов wireguard'ом

Два дефолтных маршрута
  Если есть дефол, то пакет приходящий на сервер уходит по дефолтному маршруту и не возвращается, даже если дефолта два и метрики у них разные, на этот случай необходмо помечать пришедшие пакеты и отправлять их по нужному маршруту

    ip route add default via 172.31.16.1 dev eth0 table 101
    ip route add default via 172.31.16.1 dev eth1 table 102
    ip rule add from 172.31.17.242 table 101
    ip rule add from 172.31.25.12 table 102

СПОЙЛЕРЫ:
  В маршрутизации server указан маршрут для сети 172.16.2.0 через 172.16.0.2(туннель), получается что для доступу в ту сеть нужно идти в туннель

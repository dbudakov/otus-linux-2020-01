rndc -c reload rndc.conf

dig @192.168.50.10 test.dns.lab NS
  Вывод таблицы in-addr.arpa
    dig -x 192.168.50.10
      ;; ANSWER SECTION:
      10.50.168.192.in-addr.arpa. 3600 IN PTR ns01.dns.lab.
      10.50.168.192.in-addr.arpa. 3600 IN PTR ns01.newdns.lab.

      ;; SERVER: 192.168.50.10#53(192.168.50.10) - отвечающий сервер

strings /var/named/slaves/named.dns.lab.view1



## В опциях rndc есть ключ и опции для подключения к серверу, благодаря чему можно выполнить reload сервера, указанного в конфиге
## cat rndc.conf
---begin---
key "rndc-key" {
    algorithm hmac-md5;
    secret "****";
};

options {
    default-key "rndc-key";
    default-server 192.168.50.10;
};
---end---
rndc -c rndc.conf reload


dns инструмент для сетки
  dnsmasq

DNS - Domain Name Service. Для работы использует протокол udp и порт 53, бывает что использует 53/tcp, для того чтобы серверы между собой при репликации зон имели возможность надёжного транспорта, т.е. когда один сервер другому передает зону, то они могут это сделать по tcp/53. Поэтому следует обратить на это внимание в случае сложностей с репликацией. Касательно BIND, имеется ещё 953 порт, который служит для управления.
В занятии рассматривается ISC-BIND. Альтернативное ПО для ДНС:  powerdns, dnsmasq, unbound. При работе с bind нужно обращать внимание и использовать руководство именно к вашей версии bind'a.

Суть ДНС:
  - сопоставить адреса именам.

  Сопоставления могут быть:
    - прямые: Имя --> IP-адрес
    - обратные: IP-адрес --> Имя

  ДНС можно использовать для:
    - хранения дополнительной информации
        архитектуры сетк
        конфигурация приложения
        текстовая информация которая используется антиспам сервисами
    - балансировки нагрузки

Иерархия ДНС - стр 17, 01:06 мин вебинара
  "." - корневой домен, безыминная корневая зона
  "ru" - Домен первого уровня
  "pp.ru" - Домен второго уровня
  "molchanov.pp.ru"
  "mx.molchanov.pp.ru"

  Такая иерархическая структура позволяет конкретным серверам,обеспечивать, быть авторитативными, только для той части интернета, тех зон и тех доменов, которые им делигированы.

  FQDN - Fully qualified domain name, полностью указанное доменное имя - от корневого домена.Ключевым индикатором fqdn является точка в конце имени.

Dig

Если сервер кэширует записи в ходи итеративного запроса, то такой сервер называется кэширующим. При этом сервера делятся на master-сервера и slave-сервера. Master - авторитативный сервер, который хранит главную копию файла зоны. Slave - получает копию файла зоны от главного или другого вторичного сервера.

Запись DNS обладает следующими ключевыми атрибутами:
  Имя
  TTL       - срок жизни записи
  Класс
  Тип (стр 22)
    ## [EN](https://en.wikipedia.org/wiki/List_of_DNS_record_types)
    ## [RU](https://ru.wikipedia.org/wiki/%D0%A2%D0%B8%D0%BF%D1%8B_%D1%80%D0%B5%D1%81%D1%83%D1%80%D1%81%D0%BD%D1%8B%D1%85_%D0%B7%D0%B0%D0%BF%D0%B8%D1%81%D0%B5%D0%B9_DNS)
    A       - ipv4 запись
    AAAA    - ipv6 запись
    CNAME   - соответствие одного имени другому
    MX      - указывает какой сервер занимается обработкой почты для данного домена
    TXT(SPF)- тектовая запись, которая может использоваться
    SOA     - Start Of Authority - ключевая запись домена, сообщает что в конкретный домен, делегированы такие-то серверы, с такими-то параметрами
    NS      - имя ДНС сервера и сопоставления в конкретный адрес
    PTR     - Poin TeR - нужна для обратного преобразования,сопоставление IP-адреса имени.
    SRV     - описание сервера, если какой-то сервис обратится к ДНС, он может узнать некоторые параметры или настройки сервера
  Значение


SOA - единственная запись, внутри домена, располагается на master-сервере, реплицируется на slave'ы и она описывает ту самую логическую точку, с которой начинается зона ответственности ДНС сервера, по данному доменному имени.
Находится в файле /var/named/named.dns.lab
## /var/named/named.dns.lab
dns.lab       IN SOA  ns01.dns.lab.   root.dns.lab.(
                      2711201409 ; serial
                      3600       ; refresh (1 hour)
                      600        ; retry (10 minutes)
                      86400      ; expire (1 day)
                      600        ; minimum (10 minutes)
                      )
  Такая запись говорит, что данный сервер ответственен за зону dns.lab, master-сервер ns01.dns.lab., email администратора root.dns.lab.(резолвится как root@dns.lab, поэтому не желательно содержание точки в названии почты администратора), точка в названиях обязательна, иначе будет добавляться суффикс "dns.lab", далее следует массив определяющий зону, серийник(версия файла зоны, при изменении файла, число растет, делается это для того чтобы slave-сервера видели что нужно обновить файл зоны, в случае разницы в версиях. Если файл изменяется руками, то сериник необходими увеличить) 2711201409, далее время в течении которого slave будет пытаться считывать информацию с мастера,время обновления зоны 3600, если у slave не получится снять информацию за отрезок(refresh), он будет повторять это действие через 600, но если в течении 86400 у slave не получится получить информацию он перейдет в режим отказа, и не будет обслуживать никакие запросы, по умолчанют время жизни каждой записи(TTL-time to live) 600, если не указано иное

  Файлы зон на slave-серверах хранятся в бинарном виде по пути
    /var/named/slaves/*

  cat /var/log/messages  # можно посмотреть информацию о репликации



  ## /var/named/named.50.168.192.rev.view1
  50.168.192.in-addr.arpa       # подсеть

  ; DNS Servers                 # конкретные хосты
  10    IN PTR ns01.dns.lab.
  11    IN PTR ns02.dns.lab.
  ; other                       # конкретные клиенты
  15    IN PTR client.dns.lab.
  16    IN PTR client2.dns.lab.

Обратное разрешение имен - используется почтовыми доменами для проверки, соответствия ip, тому доменному имени с которого пришло письмо, не было ли подмены по дороге. Если настраивается почтовый сервер, то либо у себя прописываются PTR, либо у провайдера. Это самая первая и самая нормальная проверка, без него на большинство крупных почтовых серверов письмо не отправится, а если и пройдет, то попадет в спам.
1. ip-адрес нужно развернуть
   192.168.10.1 --> 1.10.168.192.
   В таком виде он станет соответствовать "направлению" доменных имен.

2. централизованный домен для хранения информации об ip-адресах:
   in-addr.arpa - для ipv4
   ip6.arpa - для ipv6

3. - тип записи в котором хранистся имя соответствующее адресу - PTR


Рано или поздно в сети возникает такой момент, когда разным хостам и клиентам необходимо отдавать разную информацию, например внутренние клиенты получают одни параметры, а клиенты из-вне другие, это решается с помощью техники   SplitDNS в isc-bind, и реализовано через "view".
  "view" трактуется как область видимости которую мы создаем отдельному клиенту, клиент может попасть во view основываясь на: адресе источника, адресе назначения, dns tsig-ключе
    При конфигурации view, все зоны так или иначе должны быть включены во view
  Сопоставление acl --> view идет по порядку их следования, т.е. если клиен по acl попадает и в view1 и  view2, то отработает та которая встретилась первой по тексту конфига.
  Если клиент не попал не в одно из view  то ему ничего не ответят совсем, поэтому правилом хорошего тона, считается после того как настроены все match'и и view'шки, сделать еще view "default", для того чтобы остальные получили дефолтовые параметры или намеренно ничего не настраивать.
